namespace Arrays_Practice_1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            NumberCubeProject();
            /*
            RndArray(); 
            RandNumArrayProject();
            TicTacToe(); 
             */
        }//end main
        //ARRAY PROJETS 1DIMENSIONAL--2DIMENSIONAL--MULTIDIMENSIONAL--
        #region tictactoe

        static void TicTacToe()
        {
            //ARRAY
            char[,] ticTacToe = {
            //col  0    1    2
                { 'A', 'B', 'C' }, //dimension 0 row
                { 'D', 'E', 'F' }, //dimension 1 row
                { 'G', 'H', 'I' } //dimension 2 row
            
            };//END ARRAY
              //-----------------------------------1D ARRAY EXAMPLE ------------------------------------------|
              //DISPLAY 1 dimension           
            Console.WriteLine("Display 1 dimension array");

            for (int row = 0; row < ticTacToe.GetLength(0); row++) //GetLenght returns value (0)dimension
            {
                Console.WriteLine($"{ticTacToe[row, 1]}"); //calls value saved in row 0, col 1
            } //END FOR

            //SPACE
            Console.WriteLine();
            //-----------------------------------2D ARRAY EXAMPLE ------------------------------------------|
            //DISPLAY 2 dimension
            Console.WriteLine("Display 2 dimension array");
            /*loop runs from row index 0 to the length of the first dimension of the ticTacToe array*/
            for (int row = 0; row < ticTacToe.GetLength(0); row++)//GetLenght returns value (0)dimension
            {
                /*loop that iterates over the columns of ticTacToe array. 
                 * The loop will run from column 0 to the last 
                 * column of the array (ticTacToe.GetLength(1) - 1)*/
                for (int col = 0; col < ticTacToe.GetLength(1); col++)
                {
                    Console.Write($"{ticTacToe[row, col]}    ");//

                } // END FOR -- COLUMN

                Console.WriteLine(); //displays rows separetly

            } //END FOR -- ROW
        }// END FUNCTION
        #endregion

        #region Empty 2D Array Example

        static void EmptyArray()
        {
            //-----------------------------------EMPTY 2D ARRAY ------------------------------------------|
            //EXAMPLE OF CREATING AND FILLING AN EMPTY 2D ARRAY
            Console.WriteLine("Empty 2 dimension array");
            int[,] numbers = new int[3, 3]; // array holds 3 rows, 3 cols
            int count = 1;
            for (int row = 0; row < numbers.GetLength(1); row++)
            {
                for (int col = 0; col < numbers.GetLength(0); col++)
                {
                    numbers[row, col] = count++;
                    //OR oneToNine
                    /*oneToNine[row, col] = count; 
                    count++;*/

                }//END COLUMN

            } //END ROW 

            /*LOOP goes through a two-dimensional oneToNine array and prints out each 
             * element in the array row by row. It first runs through the rows and then through the 
             * columns within each row, printing each element to the console. After iterating through all 
             * elements in a row, it prints an empty line to separate the rows.*/
            for (int row = 0; row < numbers.GetLength(1); row++)
            {

                for (int col = 0; col < numbers.GetLength(0); col++)
                {
                    Console.Write(numbers[row, col] + "  ");

                }//END COLUMN
                Console.WriteLine();
            } //END ROW 
        } //END FUNCTION
        #endregion

        #region NonUniformArray

        static void NonUniformArray()
        {
            //-----------------------------------MULTIDIMENSIONAL ARRAY ------------------------------------------|
            //EXAMPLE OF A NON-UNIFORM MULTIDIMENSIONAL ARRAY

            Console.WriteLine("EXAMPLE OF A NON-UNIFORM MULTIDIMENSIONAL ARRAY");
            //int[,] nums = new int[6, 2]; //6 rows 2 cols

            int[,] nums = {
           //col 0 1
                {1,2 }, //row 0
                {3,4 }, //row 1
                {5,6 }, //row 2
                {7,8 }, //row 3
                {9,10 },//row 4
                {11,12} //row 5
                          }; //END NUMS ARRAY

            for (int row = 0; row < nums.GetLength(1); row++)
            {
                for (int col = 0; col < nums.GetLength(0); col++)
                {
                    Console.Write(nums[col, row] + "   ");
                } //end col
                Console.WriteLine();
            } //end row
        } //END FUNCTION
        #endregion

        #region MiniProjectTorture
        static void RandNumArrayProject()
        {
            //-----------------------------------MINI PROJECT TORTURE ------------------------------------------|


            Console.WriteLine("---------|Rnd # Array Project|---------\n2D Array ");

            //CREATE A 2D ARRAY THAT CAN STORE 42 INT VALUES (YOU CHOOSE SIZING)
            Random rndNum = new Random(); //CREATES RANDOM NUMBER
            int[,] numsArray = new int[3, 14]; //CREATES ARRAY
            int rowNum = 1;

            //FILL THE ARRAY WITH RANDOM NUMBERS BETWEEN 0-7
            for (int row = 0; row < numsArray.GetLength(1); row++)
            {
                for (int col = 0; col < numsArray.GetLength(0); col++)
                {
                    numsArray[row, col] = rndNum.Next(8);

                }//END COLUMN

            } //END ROW 

            //DISPLAY ALL NUMBERS IN A 2D PATTERN
            for (int row = 0; row < numsArray.GetLength(1); row++)
            {
                Console.WriteLine($"{rowNum++}--");
                for (int col = 0; col < numsArray.GetLength(0); col++)
                {
                    Console.Write($"{numsArray[row, col]} ");

                }//END COLUMN
                Console.WriteLine();
            } //END ROW 

        }//END FUNCTION 

        #endregion

        #region RANDOM 3D ARRAY
        /* static void RndArray()
         {
             Random randomNum = new Random();
             int[,,] numArray = new int[10, 10, 10];

             //ArrayFill(numArray, randomNum);

             //DisplayArray(numArray);

             static void ArrayFill(int[,] array, Random bot)
             {
                 for (int y=0; y < numArray.GetLength(1); y++)
                 {
                     for(int x = 0; x < numArray.GetLength(0); x++)
                     {
                         numArray[x, y] = randomNum(8);
                     } //end x
                 }//end y
             }//end array fill function

             static void DisplayArray(int[,] numsArray)
             {

             }




         }//END FUCNTION*/

        #endregion

        #region Number Cube Project

        static void NumberCubeProject()
        {
            //array storing random numbers from 0 - 255

            Random randomNum = new Random(); //random # generator
            int[,,] numArray = new int[100, 100, 100];

            for (int row = 0; row < numArray.GetLength(1); row++)
            {
                for (int col = 0; col < numArray.GetLength(0); col++)
                {
                    numArray[col] = randomNum.Next(254);

                }//END COLUMN

            } //END ROW 


            //pass array to the function ArrayAnalysis
            static void ArrayAnalysis(int[,,] numArray, Random randomNum)
            {
                int h = int.MinValue;
                int l = int.MaxValue;

                //ARRAY DISPLAY
                for (int row = 0; row < numArray.GetLength(1); row++)
                {
                    for (int col = 0; col < numArray.GetLength(0); col++)
                    {
                        //LOWEST #
                        Console.WriteLine($"The lowest number in the array was {l}");
                        //HIGHES #
                        Console.WriteLine($"The highest number in the array was {h}");
                        //TOTAL NUMBERS
                        double sum = numArray.Sum(); //variable sum = addition of # of var       
                        Console.WriteLine($"The amount of numbers is {sum}");
                        Console.WriteLine($"");
                        //AVG # IN ARRAY

                    } //END FOR COL

                } //END FOR ROW

            } //END ARRAY ANALYSYS FUNCTION

        }//END MAIN FUCNTION


        #endregion

        #region Practice
        static void Practice()
        {
            int[] ns = { 8, 6, 7, 5, 3, 0, 9 }; int[] ns = { 2, 4, 6 }; int[] ns = { 7 };
            int h = int.MinValue;
            int l = int.MaxValue;
            int targetH = -1;
            int targetL = -1;

            for (int i = 0; i < ns.Length; i++)
            {

                if (ns[i] > h)
                {
                    h = ns[i];
                    targetH = i;
                } //end if

                if (ns[i] < 1)
                {
                    l = ns[i];
                    targetL = i;

                }//end if

            } //end for loop
        } //end function

        #endregion 

        #region PROMPT FUNCTIONS
        static string Prompt(string dataRequest)
        {
            //CREATE VARIABLE TO STORE THE USER RESPONSE
            string userResponse = "";

            //WRITE THE REQUEST TO THE SCREEN FOR USER TO READ
            Console.WriteLine(dataRequest);

            //RECEIVE BACK USER RESPONSE AND STORE INTO VARIABLE
            userResponse = Console.ReadLine();

            //RETURN THE REQUESTED DATA BACK TO THE CALLING CODE-BLOCK
            return userResponse;
        }//end function

        static int PromptInt(string dataRequest)
        {
            //CREATE VARIABLE TO STORE THE USER RESPONSE
            int userResponse = 0;

            //REQUEST AND RECEIVE BACK USER RESPONSE AND STORE INTO VARIABLE
            userResponse = int.Parse(Prompt(dataRequest));

            //RETURN THE REQUESTED DATA BACK TO THE CALLING CODE-BLOCK
            return userResponse;
        }//end function

        static double PromptDouble(string dataRequest)
        {
            //CREATE VARIABLE TO STORE THE USER RESPONSE
            double userResponse = 0;

            //REQUEST AND RECEIVE BACK USER RESPONSE AND STORE INTO VARIABLE
            userResponse = double.Parse(Prompt(dataRequest));

            //RETURN THE REQUESTED DATA BACK TO THE CALLING CODE-BLOCK
            return userResponse;
        }//end function

        #endregion
    }//end class
}//end namespace
